---
# Pi-hole configuration tasks
- name: Install python3-venv for virtual environments
  ansible.builtin.apt:
    name: python3-venv
    state: present
    update_cache: true

- name: Create virtual environment for pihole6api
  ansible.builtin.command:
    cmd: python3 -m venv /opt/pihole-venv
    creates: /opt/pihole-venv/bin/activate

- name: Install pihole6api in virtual environment
  ansible.builtin.pip:
    name: pihole6api
    virtualenv: /opt/pihole-venv
    state: present
    extra_args: --upgrade
  register: pip_install_result

- name: Display pip installation results
  ansible.builtin.debug:
    msg: |
      Pip installation results:
      - Changed: {{ pip_install_result.changed }}
      - Command: {{ pip_install_result.cmd | default('N/A') }}
      - Return code: {{ pip_install_result.rc | default('N/A') }}
  when: pip_install_result is defined

- name: List contents of virtual environment bin directory
  ansible.builtin.find:
    paths: /opt/pihole-venv/bin
    patterns: "*pihole*"
  register: venv_bin_contents

- name: Check if pihole6api module can be imported
  ansible.builtin.command:
    cmd: /opt/pihole-venv/bin/python -c "import pihole6api; print('pihole6api module imported successfully')"
  register: pihole6api_import_check
  changed_when: false
  failed_when: false

- name: Create symlink for pihole6api executable (if it exists)
  ansible.builtin.file:
    src: /opt/pihole-venv/bin/pihole6api
    dest: /usr/local/bin/pihole6api
    state: link
  failed_when: false
  when: venv_bin_contents.files | selectattr('path', 'match', '.*pihole6api$') | list | length > 0

- name: Create wrapper script for pihole6api module (if no executable)
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      /opt/pihole-venv/bin/python -m pihole6api "$@"
    dest: /usr/local/bin/pihole6api-module
    mode: '0755'
  when: 
    - pihole6api_import_check.rc == 0
    - venv_bin_contents.files | selectattr('path', 'match', '.*pihole6api$') | list | length == 0

- name: Verify pihole6api is available (try executable)
  ansible.builtin.command:
    cmd: /opt/pihole-venv/bin/pihole6api --help
  register: pihole6api_executable_check
  changed_when: false
  failed_when: false

- name: Verify pihole6api is available (try as module)
  ansible.builtin.command:
    cmd: /opt/pihole-venv/bin/python -m pihole6api --help
  register: pihole6api_module_check
  changed_when: false
  failed_when: false
  when: pihole6api_executable_check.rc != 0

- name: Set pihole6api command for future use
  ansible.builtin.set_fact:
    pihole6api_command: >-
      {{
        '/opt/pihole-venv/bin/pihole6api' if pihole6api_executable_check.rc == 0
        else '/opt/pihole-venv/bin/python -m pihole6api' if pihole6api_module_check.rc == 0
        else 'not_available'
      }}

- name: Display pihole6api verification results
  ansible.builtin.debug:
    msg: |
      ✅ pihole6api installation verification:
      - Package imported: {{ 'Yes' if pihole6api_import_check.rc == 0 else 'No' }}
      - Executable available: {{ 'Yes' if pihole6api_executable_check.rc == 0 else 'No' }}
      - Module callable: {{ 'Yes' if pihole6api_module_check.rc == 0 else 'No' }}
      - Command to use: {{ pihole6api_command }}
      - Bin directory contents: {{ venv_bin_contents.files | map(attribute='path') | select('match', '.*pihole.*') | list }}

- name: Configure Pi-hole block lists
  community.docker.docker_container_exec:
    container: "{{ pihole_container_name }}"
    command: pihole -w {{ item }}
  loop: "{{ pihole_block_lists }}"
  when: pihole_block_lists is defined and pihole_block_lists | length > 0
  failed_when: false

- name: Update Pi-hole gravity database
  community.docker.docker_container_exec:
    container: "{{ pihole_container_name }}"
    command: pihole -g
  failed_when: false

- name: Display Pi-hole access information
  ansible.builtin.debug:
    msg: |
      ✅ Pi-hole is configured successfully!
      Web Interface: http://{{ ansible_host }}:{{ pihole_web_port }}/admin
      DNS Server: {{ ansible_host }}:{{ pihole_dns_port }}
      Custom DNS entries configured for .mid.night domains
