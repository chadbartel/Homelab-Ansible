---
# Docker Swarm worker tasks
- name: Check current Docker Swarm status
  ansible.builtin.shell: docker info --format '{% raw %}{{.Swarm.LocalNodeState}}{% endraw %}'
  register: current_swarm_state
  changed_when: false

- name: Verify swarm connectivity from workers
  ansible.builtin.shell: docker node ls
  register: swarm_connectivity
  delegate_to: "{{ groups['manager_nodes'][0] }}"
  failed_when: false
  changed_when: false
  when: current_swarm_state.stdout == "active"

- name: Force rejoin if swarm is unhealthy
  block:
    - name: Leave unhealthy swarm
      community.docker.docker_swarm:
        state: absent
        force: true
      
    - name: Reset swarm state
      ansible.builtin.set_fact:
        current_swarm_state: { stdout: "inactive" }
  when: 
    - current_swarm_state.stdout == "active"
    - swarm_connectivity.rc != 0

- name: Get worker join token from manager
  ansible.builtin.command: docker swarm join-token -q worker
  register: worker_join_token
  delegate_to: "{{ groups['manager_nodes'][0] }}"
  run_once: true
  when: current_swarm_state.stdout != "active"

- name: Join worker to Docker Swarm
  community.docker.docker_swarm:
    state: join
    join_token: "{{ worker_join_token.stdout }}"
    remote_addrs: 
      - "{{ hostvars[groups['manager_nodes'][0]]['ansible_default_ipv4']['address'] }}"
  register: swarm_join_result
  when: current_swarm_state.stdout != "active"
  retries: "{{ docker_swarm_join_retries }}"
  delay: "{{ docker_swarm_join_delay }}"

- name: Verify final swarm state
  ansible.builtin.shell: docker info --format '{% raw %}{{.Swarm.LocalNodeState}}{% endraw %}'
  register: final_swarm_state
  changed_when: false

- name: Display final swarm state
  ansible.builtin.debug:
    msg: "Worker {{ inventory_hostname }} joined swarm successfully"
  when: final_swarm_state.stdout == "active"

- name: Fail if node is not in swarm
  ansible.builtin.fail:
    msg: "Worker {{ inventory_hostname }} failed to join swarm"
  when: final_swarm_state.stdout != "active"
