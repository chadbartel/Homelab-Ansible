---
# Docker installation tasks
- name: Install prerequisite packages
  ansible.builtin.apt:
    name: "{{ docker_prerequisite_packages }}"
    state: present
    update_cache: true

- name: Create directory for Docker GPG key
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Remove any existing Docker repository entries to avoid conflicts
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/apt/sources.list.d/docker.list
    - /etc/apt/keyrings/docker.asc
    - /etc/apt/keyrings/docker.gpg

- name: Download Docker's official GPG key
  ansible.builtin.get_url:
    url: "{{ docker_gpg_key_url }}"
    dest: /tmp/docker.asc
    mode: '0644'
    force: true

- name: Dearmor the Docker GPG key
  ansible.builtin.command:
    cmd: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.asc
    creates: /etc/apt/keyrings/docker.gpg

- name: Add Docker repository for x86_64 systems (Ubuntu)
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
  when: ansible_architecture == 'x86_64' and ansible_distribution == 'Ubuntu'

- name: Add Docker repository for x86_64 systems (Debian)
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
  when: ansible_architecture == 'x86_64' and ansible_distribution == 'Debian'

- name: Add Docker repository for ARM64 systems (Ubuntu)
  ansible.builtin.apt_repository:
    repo: "deb [arch=arm64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
  when: (ansible_architecture == 'aarch64' or ansible_architecture == 'arm64') and ansible_distribution == 'Ubuntu'

- name: Add Docker repository for ARM64 systems (Debian)
  ansible.builtin.apt_repository:
    repo: "deb [arch=arm64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
  when: (ansible_architecture == 'aarch64' or ansible_architecture == 'arm64') and ansible_distribution == 'Debian'

- name: Update apt package cache after adding Docker repo
  ansible.builtin.apt:
    update_cache: true

- name: Check if Docker is already installed with correct version
  ansible.builtin.shell: docker --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+'
  register: docker_current_version
  failed_when: false
  changed_when: false

- name: Set fact for Docker installation needed
  ansible.builtin.set_fact:
    docker_installation_needed: "{{ docker_current_version.rc != 0 or docker_current_version.stdout is version(docker_min_version, '<') }}"

- name: Install Docker Engine (only if needed)
  ansible.builtin.apt:
    name: "{{ docker_packages }}"
    state: present
  when: docker_installation_needed
  register: docker_installation_result

- name: Install Docker SDK for Python
  ansible.builtin.apt:
    name: python3-docker
    state: present

- name: Fallback Docker installation using convenience script
  block:
    - name: Download Docker convenience script
      ansible.builtin.get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'

    - name: Run Docker convenience script
      ansible.builtin.command:
        cmd: /tmp/get-docker.sh
        creates: /usr/bin/docker

    - name: Clean up convenience script
      ansible.builtin.file:
        path: /tmp/get-docker.sh
        state: absent
  when: docker_installation_result is failed or docker_use_convenience_script
